# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger: none



stages:
- stage: Build
  displayName: Build stage
  
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      vmImage: 'ubuntu-latest'
      environment: dev
    variables:
      - group: L-SAFNC-SACredit-apresentacao-Dev  # Correctly reference the variable group here
 

    steps:
    - checkout: self


      #### CHama pipeline template para download do certificado pfx caso a utilo
    - template: templates/download-securefile.yml
      parameters:
            environmentName: "$(environmentName)"
            certificatepassword: $(certificate-password)

    - task: CopyFiles@2
      displayName: 'Copy File oauth-client-dev.key to artifact staging directory'
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: 'oauth-client-$(environmentName).key'
        TargetFolder: $(System.DefaultWorkingDirectory)/src/main/resources/
      name: CopyFiles            

      #### para a task abaixo, é necessário a instalação do replace tokens no azure devops ####
    - task: qetza.replacetokens.replacetokens-task.replacetokens@4
      displayName: '*App* | Replace tokens in **/*.properties'
      inputs:
            rootDirectory: ''
            targetFiles: '**/application.properties'


    - task: Maven@3
      displayName: 'Maven pom.xml'
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: false
        codeCoverageToolOption: 'jaCoCo'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: true
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        options: 'package -Dmaven.test.skip'



    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)


    - upload: $(Build.ArtifactStagingDirectory)
      displayName: faz upload da pasta Build.ArtifactStagingDirectory para artefato criado chamado drop
      artifact: drop




- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJavaApp
    displayName: Deploy Java Web App
    environment: dev
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: webpessoalspring'
            inputs:
              azureSubscription: 'INSIRA AQUI A SUA SUBSCRIÇÃO'
              appType: 'webApp'
              appName: 'NOME DO SEU WEBAPP'
              package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'
              deploymentMethod: 'auto'
